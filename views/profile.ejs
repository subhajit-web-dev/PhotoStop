<% include ./partials/header.ejs %> 

    <div class="profile w-full min-h-full bg-zinc-800 text-white pt-1">
        <% include ./partials/nav.ejs %> 
            <div class="w-full h-full px-11 py-8">
                <form hidden id="uploadform" action="/fileupload" method="post" enctype="multipart/form-data">
                    <input type="file" name="image">
                </form>
                <div class="profdets mt-8 flex flex-col items-center justify-center">
                    <div class="relative">
                        <span id="uploaddp" class="w-7 h-7 absolute bottom-0 right-0 rounded-full flex items-center justify-center bg-zinc-200">
                            <i class="ri-pencil-fill text-zinc-800 cursor-pointer"></i>
                        </span>
                        <% if (!user.profileImage.data){ %>
                            <div class="w-32 h-32 border-2 bg-zinc-200 rounded-full overflow-hidden">
                                <a href=""  data-lightbox="profile-image">
                                    <img class="w-full h-full object-cover " src="/images/uploads/DefaultUser.jpg" alt="profile_image">
                                </a>
                            </div>
                        <% } else { %>
                            <div class="w-32 h-32 border-2 bg-zinc-200 rounded-full overflow-hidden">
                                <a href="data:<%= user.profileImage.contentType %>;base64,<%= user.profileImage.data.toString('base64') %>"  data-lightbox="profile-image">
                                    <img class="w-full h-full object-cover " src="data:<%= user.profileImage.contentType %>;base64,<%= user.profileImage.data.toString('base64') %>" alt="profile_image">
                                </a>
                            </div>
                        <% } %>
                        
                    </div>
                    <h1 class="text-2xl font-semibold mt-2"><%= user.fullname %></h1>
                    <h3 class="text-lg">@<%= user.username %></h3>
                    <a href="/edit" class="mt-3 px-5 py-3 text-xs tracking-widest font-semibold bg-zinc-700 rounded-full">Edit profile</a>
                    <a href="/add" class="px-8 py-2 text-sm tracking-widest font-semibold rounded-full bg-red-700 mt-4">New post</a>
                </div>

                <div class="container">
                    <% user.posts.forEach(function(post){ %>
                        <div class="box">
                            <div class="image relative">
                                <p class="edit" onclick="editPost('<%= post._id %>')">Edit</p>
                                <a href="data:<%= post.image.contentType %>;base64,<%= post.image.data.toString('base64') %>" data-lightbox="posts" data-title="<%= post.caption %>">
                                    <img src="data:<%= post.image.contentType %>;base64,<%= post.image.data.toString('base64') %>" alt="image">
                                </a>
                            </div>
                            
                            <div class="flex justify-between mt-1">
                                <div class="like">
                                    <% if(post.likedUsers.includes(user._id)){ %>
                                        <i onclick="like('<%= post._id %>', '<%= user._id %>')" id="like-<%= post._id %>" class="fas fa-regular fa-heart text-xl"></i>
                                    <% } else { %>
                                        <i onclick="like('<%= post._id %>', '<%= user._id %>')" id="like-<%= post._id %>" class="fa-regular fa-heart text-xl"></i>
                                    <% } %>
                                    <span id="like-count-<%= post._id %>" class="text-lg"><%= post.likeCount %></span>
                                </div>
                                <% if(user.savedPost.includes(post._id)){ %>
                                    <i onclick="savePost('<%= post._id %>', '<%= user._id %>')" id="save-<%= post._id %>" class="save fa-solid fa-bookmark mt-2"></i>
                                <% } else { %>
                                    <i onclick="savePost('<%= post._id %>', '<%= user._id %>')" id="save-<%= post._id %>" class="save fa-regular fa-bookmark mt-2"></i>
                                <% } %>
                            </div>
                        </div>
                    <% }) %>
                </div>    
            </div>
    </div>

    <script src="/javascripts/lightbox-plus-jquery.js"></script>

    <script>    

        async function savePost(postId, userId){

            let btn = document.getElementById("save-" + postId);

            var data = await fetchUserData();
            console.log(data);

            if(data.savedPost.length > 0 && data.savedPost.includes(postId)){
                btn.classList.remove("fa-solid");
                btn.classList.add("fa-regular");
                updateSavedPostInBackend(postId, userId, false);
            }
            else{
                btn.classList.remove("fa-regular");
                btn.classList.add("fa-solid");
                updateSavedPostInBackend(postId, userId, true);
            }

        };

        async function fetchUserData() {
            try {
                const response = await fetch('/getuserdata'); // Assuming '/getdata' is the endpoint on your backend server
                const data = await response.json(); // Parse the response as JSON
                return data; // Return the fetched data
            } catch (error) {
                // Handle errors
                console.error('Error fetching data:', error);
                throw error; // Re-throw the error to be caught by the caller
            }
        };

        async function updateSavedPostInBackend(postId, userId, value) {
            try {
                const response = await fetch('/updatesavepost', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        postId: postId,
                        userId: userId,
                        value: value
                    })
                });

                if (!response.ok) {
                    throw new Error('Failed to update like count');
                }

                const responseData = await response.json();
                console.log('Like count updated successfully for post:', postId);
            } catch (error) {
                console.error('Error updating like count:', error);
            }
        };

        // This function sends a GET request to the '/editpost' route with the postId as a query parameter
        async function editPost(postId) {
            try {
               
                const queryParams = new URLSearchParams();
                queryParams.append('postId', postId);

                // Redirect to another route with data
                window.location.href = '/editpost?' + queryParams.toString();

            } catch (error) {
                console.error(error);
            }
        };

        async function like(postId, currentUser) {

            // Get the like button for the specific post
            let btn = document.getElementById("like-" + postId);

            // Get the like count element for the specific post
            let likeCountElement = document.getElementById('like-count-' + postId);

            try {
                var data = await fetchData(); // Fetch data asynchronously
                
            } catch (error) {
                // Handle errors
                console.error('Error:', error);
            }

            for(let i=0; i<data.length; i++){
                if(data[i]._id === postId){
                    // Get the current like count
                    var currentLikeCount = data[i].likeCount;
                    var index = i;
                    break;
                }
                
            }

            let newLikeCount;
            let value;

            if (data[index].likedUsers.length > 0 && data[index].likedUsers.includes(currentUser)) {
                    
                btn.classList.remove("fas");
                btn.classList.add("far");


                // Decrement the like count
                newLikeCount = currentLikeCount - 1;

                    
                // Update the like count display
                likeCountElement.innerText = newLikeCount;

                value = false;

                // Send updated like count to the backend route
                updateLikeCountInBackend(postId, newLikeCount, currentUser, value);
                    

                    
                // } 
            } 
            else {

                btn.classList.remove("far");
                btn.classList.add("fas");
            

                // Increment the like count
                newLikeCount = currentLikeCount + 1;

                
                // Update the like count display
                likeCountElement.innerText = newLikeCount;

                value = true;

                // Send updated like count to the backend route
                updateLikeCountInBackend(postId, newLikeCount, currentUser, value);

                
            }
        };

        async function updateLikeCountInBackend(postId, newLikeCount, currentUser, value) {
            try {
                const response = await fetch('/updatelikecount', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        postId: postId,
                        newLikeCount: newLikeCount,
                        currentUser: currentUser,
                        value: value
                    })
                });

                if (!response.ok) {
                    throw new Error('Failed to update like count');
                }

                const responseData = await response.json();
                console.log('Like count updated successfully for post:', postId);
            } catch (error) {
                console.error('Error updating like count:', error);
            }
        };

        async function fetchData() {
            try {
                const response = await fetch('/getdata'); // Assuming '/getdata' is the endpoint on your backend server
                const data = await response.json(); // Parse the response as JSON
                return data; // Return the fetched data
            } catch (error) {
                // Handle errors
                console.error('Error fetching data:', error);
                throw error; // Re-throw the error to be caught by the caller
            }
        }

       
        document.querySelector("#uploaddp").addEventListener("click", function(){
            document.querySelector("#uploadform input").click();
        })

        document.querySelector("#uploadform input").addEventListener("change", function(){
            document.querySelector("#uploadform").submit();
        })    
    </script>

<% include ./partials/footer.ejs %>

